20) Write a Django project that sends an OTP to the user's mobile number during registration using Twilio API.

# Installation Notes
# 1. Install Twilio library:
#    pip install twilio
# 2. Add your Twilio credentials to settings.py.
# 3. Replace placeholders with actual values before running.
# 4. Start the Django server and test the OTP endpoint.

from django.shortcuts import render
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.conf import settings
from twilio.rest import Client
import random
import json

# Settings (add this to your settings.py)
TWILIO_ACCOUNT_SID = 'your_twilio_account_sid'  # Replace with your Twilio Account SID
TWILIO_AUTH_TOKEN = 'your_twilio_auth_token'  # Replace with your Twilio Auth Token
TWILIO_PHONE_NUMBER = 'your_twilio_phone_number'  # Replace with your Twilio phone number

# Utility function to generate OTP
def generate_otp():
    """Generate a 6-digit OTP."""
    return random.randint(100000, 999999)

# Views
@csrf_exempt
def send_otp(request):
    """Send an OTP to the user's mobile number during registration."""
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            phone_number = data.get('phone_number')

            if not phone_number:
                return JsonResponse({"error": "Phone number is required."}, status=400)

            # Generate OTP
            otp = generate_otp()

            # Store OTP in session (or database for real-world scenarios)
            request.session['otp'] = otp

            # Send OTP using Twilio
            client = Client(settings.TWILIO_ACCOUNT_SID, settings.TWILIO_AUTH_TOKEN)
            message = client.messages.create(
                body=f"Your OTP is: {otp}",
                from_=settings.TWILIO_PHONE_NUMBER,
                to=phone_number
            )

            return JsonResponse({"message": "OTP sent successfully."})

        except json.JSONDecodeError:
            return JsonResponse({"error": "Invalid JSON payload."}, status=400)
        except Exception as e:
            return JsonResponse({"error": "Failed to send OTP.", "details": str(e)}, status=500)
    else:
        return JsonResponse({"error": "POST method required."}, status=405)

# urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('send-otp/', views.send_otp, name='send_otp'),
]


