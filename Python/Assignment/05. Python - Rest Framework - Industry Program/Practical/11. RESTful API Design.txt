11) Write a Django REST API with endpoints for creating, reading, updating, and deleting doctors.

1. Setup Django Project and Install Dependencies
# Install Django and Django REST Framework
pip install django
pip install djangorestframework


2. Create a Django Project and App
django-admin startproject hospital
cd hospital
python manage.py startapp doctors

3. Update settings.py
INSTALLED_APPS = [
    # Other apps
    'rest_framework',
    'doctors',
]

4. Define the Doctor Model
from django.db import models

class Doctor(models.Model):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    specialty = models.CharField(max_length=200)
    phone_number = models.CharField(max_length=15)
    email = models.EmailField()

    def __str__(self):
        return f"{self.first_name} {self.last_name} - {self.specialty}"

5. Migrate the Database
python manage.py makemigrations
python manage.py migrate

6. Create Serializers
doctors/serializers.py
from rest_framework import serializers
from .models import Doctor

class DoctorSerializer(serializers.ModelSerializer):
    class Meta:
        model = Doctor
        fields = '__all__'

7. Create Views (API Endpoints)
doctors/views.py
from rest_framework import viewsets
from .models import Doctor
from .serializers import DoctorSerializer

class DoctorViewSet(viewsets.ModelViewSet):
    queryset = Doctor.objects.all()
    serializer_class = DoctorSerializer

8. Configure URLs
doctors/urls.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import DoctorViewSet

router = DefaultRouter()
router.register(r'doctors', DoctorViewSet)

urlpatterns = [
    path('', include(router.urls)),
]

hospital/urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('doctors.urls')),  # API URL
]


9. Test the API
python manage.py runserver

10. API Endpoints
The API will support the following endpoints:

GET /api/doctors/: List all doctors.
POST /api/doctors/: Create a new doctor.
GET /api/doctors/{id}/: Retrieve a specific doctor.
PUT /api/doctors/{id}/: Update a specific doctor.
DELETE /api/doctors/{id}/: Delete a specific doctor.
Example:
To create a new doctor, make a POST request to /api/doctors/ with a JSON body:
{
    "first_name": "John",
    "last_name": "Doe",
    "specialty": "Cardiologist",
    "phone_number": "123-456-7890",
    "email": "john.doe@example.com"
}

11. Adding Authentication (Optional)
To secure the API, you can add authentication by modifying settings.py and using token-based authentication or another method. For example, using TokenAuthentication:

Install djangorestframework-simplejwt:
pip install djangorestframework-simplejwt

Update settings.py to include the authentication classes:
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

Add JWT views for login and refresh tokens in urls.py:
from rest_framework_simplejwt import views as jwt_views

urlpatterns = [
    path('api/token/', jwt_views.TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('api/token/refresh/', jwt_views.TokenRefreshView.as_view(), name='token_refresh'),
]